"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const probe_image_size_1 = __importDefault(require("probe-image-size"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const getURLFile_1 = require("../../utils/getURLFile");
const common_1 = require("../../utils/common");
const handle = async (ctx) => {
    let results = ctx.output;
    await Promise.all(ctx.input.map(async (item) => {
        let info;
        if (common_1.isUrl(item)) {
            info = await getURLFile_1.getURLFile(ctx, item);
        }
        else {
            info = await getFSFile(item);
        }
        if (info.success) {
            try {
                const imgSize = probe_image_size_1.default.sync(info.buffer);
                results.push({
                    buffer: info.buffer,
                    fileName: info.fileName,
                    width: imgSize.width,
                    height: imgSize.height,
                    extname: path_1.default.extname(item)
                });
            }
            catch (e) {
                ctx.log.error(e);
            }
        }
        else {
            ctx.log.error(info.reason);
        }
    }));
    return ctx;
};
const getFSFile = async (item) => {
    try {
        return {
            extname: path_1.default.extname(item),
            fileName: path_1.default.basename(item),
            buffer: await fs_extra_1.default.readFile(item),
            success: true
        };
    }
    catch (_a) {
        return {
            reason: `read file ${item} error`,
            success: false
        };
    }
};
exports.default = {
    handle
};
