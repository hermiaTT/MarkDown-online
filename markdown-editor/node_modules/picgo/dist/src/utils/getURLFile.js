"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
exports.getURLFile = async (ctx, url) => {
    const requestOptions = {
        method: 'GET',
        url,
        encoding: null
    };
    let isImage = false;
    let extname = '';
    let timeoutId;
    // tslint:disable-next-line: typedef
    const requestPromise = new Promise(async (resolve) => {
        try {
            const res = await ctx.Request.request(requestOptions)
                .on('response', (response) => {
                const contentType = response.headers['content-type'];
                if (contentType.includes('image')) {
                    isImage = true;
                    extname = `.${contentType.split('image/')[1]}`;
                }
            });
            clearTimeout(timeoutId);
            if (isImage) {
                resolve({
                    buffer: res,
                    fileName: path_1.default.basename(requestOptions.url.split('?')[0]),
                    extname,
                    success: true
                });
            }
            else {
                resolve({
                    success: false,
                    reason: `${url} is not image`
                });
            }
        }
        catch (_a) {
            clearTimeout(timeoutId);
            resolve({
                success: false,
                reason: `request ${url} error`
            });
        }
    });
    // tslint:disable-next-line: typedef
    const timeoutPromise = new Promise((resolve) => {
        timeoutId = setTimeout(() => {
            resolve({
                success: false,
                reason: `request ${url} timeout`
            });
        }, 10000);
    });
    return Promise.race([requestPromise, timeoutPromise]);
};
